package main

import (
	"github.com/dave/jennifer/jen"
	"github.com/jessevdk/go-flags"
	structview "github.com/reddec/struct-view"
	"os"
	"path/filepath"
	"strings"
)

type Config struct {
	Package     string `short:"p" long:"package" env:"PACKAGE" description:"Package name (can be override by output dir)" default:"cache"`
	Output      string `short:"o" long:"output" env:"OUTPUT" description:"Generated output destination (- means STDOUT)" default:"-"`
	KeyType     string `short:"k" long:"key-type" env:"KEY_TYPE" description:"Key type" required:"yes"`
	ValueType   string `short:"v" long:"value-type" env:"VALUE_TYPE" description:"Value type" required:"yes"`
	KeyImport   string `short:"i" long:"key-import" env:"KEY_IMPORT" description:"Import for key type"`
	ValueImport string `short:"I" long:"value-import" env:"VALUE_IMPORT" description:"Import for value type"`
	TypeName    string `short:"t" long:"type-name" env:"TYPE_NAME" description:"TypeName for cache" default:"Manager"`
}

func main() {
	var config Config
	_, err := flags.Parse(&config)
	if err != nil {
		os.Exit(1)
	}

	var out *jen.File
	if config.Output != "-" {
		pkg, err := structview.FindPackage(filepath.Dir(config.Output))
		if err != nil || config.Package != "" {
			// fallback
			out = jen.NewFile(config.Package)
		} else {
			out = jen.NewFilePathName(pkg, filepath.Base(pkg))
		}
	} else {
		out = jen.NewFile(config.Package)
	}
	ev := structview.SyncMapGen{
		TypeName:    config.TypeName,
		KeyType:     config.KeyType,
		KeyImport:   config.KeyImport,
		ValueType:   config.ValueType,
		ValueImport: config.ValueImport,
	}
	code := ev.Generate()
	out.Add(code)
	var output = os.Stdout
	if config.Output != "-" {
		output, err = os.Create(config.Output)
		if err != nil {
			panic(err)
		}
		defer output.Close()
	}
	if config.Output != "" {
		for i, arg := range os.Args {
			if arg == config.Output {
				os.Args[i] = filepath.Base(arg)
				break
			}
		}
	}
	_, _ = output.WriteString("// Code generated by syncmap-gen. DO NOT EDIT.\n")
	_, _ = output.WriteString("//go:generate " + strings.Join(os.Args, " ") + "\n")
	err = out.Render(output)
	if err != nil {
		panic(err)
	}
}
