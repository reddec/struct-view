package main

import (
	"github.com/dave/jennifer/jen"
	"github.com/jessevdk/go-flags"
	structview "github.com/reddec/struct-view"
	"os"
	"path/filepath"
	"strings"
)

type Config struct {
	Output   string   `short:"o" long:"output" env:"OUTPUT" description:"Generated output destination (- means STDOUT)" default:"-"`
	TypeName []string `short:"t" long:"type-name" env:"TYPE_NAME" description:"TypeName for generator" default:"Manager"`
}

func main() {
	var config Config
	_, err := flags.Parse(&config)
	if err != nil {
		os.Exit(1)
	}

	var out *jen.File
	for _, typeName := range config.TypeName {
		ev := structview.BinaryGenerator{
			TypeName: typeName,
		}
		code, pack, err := ev.Generate(".")
		if err != nil {
			panic(err)
		}
		if out == nil {
			out = jen.NewFile(pack)
		}
		out.Add(code)
	}
	if out == nil {
		os.Exit(2)
	}
	var output = os.Stdout
	if config.Output != "-" {
		output, err = os.Create(config.Output)
		if err != nil {
			panic(err)
		}
		defer output.Close()
	}
	if config.Output != "" {
		for i, arg := range os.Args {
			if arg == config.Output {
				os.Args[i] = filepath.Base(arg)
				break
			}
		}
	}
	_, _ = output.WriteString("// Code generated by binary-gen. DO NOT EDIT.\n")
	_, _ = output.WriteString("//go:generate " + strings.Join(os.Args, " ") + "\n")
	err = out.Render(output)
	if err != nil {
		panic(err)
	}
}
