// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package internal generated by go-bindata.// sources:
// ts.gotemplate
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tsGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\xc1\x8a\xdb\x30\x10\xbd\xfb\x2b\xa6\x10\x88\x0d\x59\x93\x5e\x9d\x66\x6f\x2d\x6d\xa1\xdb\xc2\x2e\xf4\xba\x5a\x7b\x9c\x88\x6a\x25\x23\x4d\xd2\x0d\x5a\xfd\x7b\x91\x65\x2b\x76\x9c\xa4\x97\x85\x56\xa7\xd8\x9e\x99\x37\xef\x69\xde\xc4\x5a\xcd\xe4\x06\xa1\xc2\x9a\x4b\x4e\x5c\x49\xe3\x5c\x82\x2f\x8d\xd2\x04\x5c\x12\xea\x9a\x95\x08\xd6\xe6\x0f\x87\x06\xef\xd8\x33\x3a\x07\x36\x01\x00\xb0\xf6\x06\x42\x72\x7e\x4f\x7a\x57\xd2\x27\x8e\xa2\xf2\xe9\xe1\x6b\xfe\xc0\x36\xce\x15\xfe\x17\xbc\x02\x1d\x1a\x34\xa5\xe6\x0d\xc5\x80\x1b\x40\x59\x39\x97\xb8\xc4\xda\xf0\xab\x07\xf6\xc1\xf0\x71\x8f\x92\x3c\x22\xac\xa1\x6f\x73\xc6\x65\x85\x2f\x0b\x98\xe1\x1e\x8a\x35\xe4\x6d\x8c\x71\xce\x5a\x5e\xc3\x86\xba\xef\xb0\x74\x0e\x5e\xa1\xab\x3a\xb7\x76\x86\xfb\x3c\xf4\x3e\xef\x5e\xae\xa6\x50\x3f\xd8\x41\x28\x56\x5d\x46\x1b\x69\x74\x0d\x31\x00\x1e\x05\xbb\x8c\xf9\x99\xc9\x4a\xa0\x86\x35\xa4\x69\x13\xf0\x8b\x51\x37\x0b\x40\xff\x54\x1c\xd5\xc8\x60\x7d\x0b\xe9\x5e\xf1\x2a\xcb\xe0\xf5\x52\xde\x30\x2a\xca\x5a\x0a\x66\x4c\x08\x33\xdd\x25\x36\x9a\xef\x19\x21\x18\x52\x4d\x83\x9e\x7c\xcd\x84\xc1\xd5\xe8\xa3\x46\x56\x29\x29\x0e\x20\xb8\x21\x94\xa8\x0d\xac\x41\xe2\x6f\xf8\xc6\x9a\x0f\xb1\xb1\xc5\x88\xd2\x6d\x9a\xad\x92\xb6\x4a\xa9\xa4\x69\xe7\x43\xe9\x74\x52\x71\xa7\x45\x01\x86\x34\x97\x9b\xc5\x14\x4f\x63\xa9\xa4\xc4\x92\xbe\xf8\x49\xdc\x33\x51\x80\xdc\x3d\x3f\xb5\x82\xbd\x5f\x2e\x97\x59\xc7\xc2\x1f\xda\x72\x93\x1b\x62\x9a\x3c\xb2\x7f\xe3\x02\xbe\x92\xe9\xa9\x86\x0b\xd8\x86\x2e\x8b\x51\xcf\x93\x72\x91\x6f\x6e\x90\x42\x95\x98\x9a\x8d\x30\xea\xfa\x0d\x40\x2a\x14\x48\x18\x0a\xc5\xf2\xfd\x30\xc6\x59\xef\x48\x59\xdb\x8d\x74\x1a\x61\x06\xb3\x30\x32\xec\xe5\x91\x19\x85\x5d\x9f\xb5\xbf\x88\x33\x8f\xfd\xcc\x23\x71\x60\x66\x4c\x7d\x75\xa2\xd9\x7f\xc4\xa1\xd3\x7e\x40\xe3\xd8\x6d\x5c\x4f\xfe\xd9\x3b\x25\x3d\x33\x78\xbd\x7f\x48\xef\x70\xc4\xf3\x68\xb1\x76\x36\x07\x99\xbc\x86\x74\x98\x9d\x81\x46\xda\x69\xb9\x8a\x11\x02\x09\x34\xb6\x99\xa7\xe6\x8c\xd6\x02\xa3\xca\x5f\x48\x9d\x25\x7f\xe2\xd3\x7d\xfb\x1c\x2a\xef\xb4\xc8\x8e\xf1\x21\x32\x57\xb2\x14\xca\xf8\xbd\x9a\xb6\xea\x1c\x3b\xea\xbb\x7a\x17\x41\xb3\x93\xaf\xfe\x0c\x3b\x3a\xd2\x1d\x1e\x83\xd1\xb2\x69\xc0\x18\xda\x73\x11\x9e\x26\xee\xce\xc6\x85\x5c\x32\xfd\x15\x19\xa0\xd6\xaa\xdd\x9b\x78\x86\x82\xd7\x45\x09\xcc\xdb\xa0\x14\x4f\xea\xbe\x09\xc1\xd0\x47\xab\x63\x9a\xfd\x0b\x01\x9e\xd1\x18\xb6\x69\x2f\xd1\x56\x8c\x98\xbb\xa0\x03\x81\xed\x16\x57\xe7\x18\x07\x6b\xf8\x7a\xff\xfd\x2e\x6f\x98\x36\x98\xfa\xdc\xcc\x3b\xd5\xf6\xd6\x89\xeb\xb8\x77\x18\x93\x07\x70\xab\x33\x95\xb7\xf1\xef\xeb\xc4\x4d\x9b\x7e\x5d\xc6\x15\xd0\x5a\x71\x7a\x0f\xdb\xe9\x52\xec\x0f\xe9\xc3\xf4\xa5\x3f\x5d\x4e\xbf\x01\x3a\xcb\x5f\x43\x6a\x25\x84\x92\x51\xb9\xf5\xf3\x72\xbe\xec\x78\x68\x1e\x6b\xc6\x05\x56\x40\x0a\x1a\xad\x4a\x34\x26\xb2\xad\x95\xee\x20\x67\x41\x5a\x57\x3c\x2e\xe0\x2c\xe6\xd5\xeb\x74\x49\xe2\xfe\x04\x00\x00\xff\xff\x85\xf5\x9c\xfe\x80\x09\x00\x00")

func tsGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_tsGotemplate,
		"ts.gotemplate",
	)
}

func tsGotemplate() (*asset, error) {
	bytes, err := tsGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ts.gotemplate", size: 2432, mode: os.FileMode(420), modTime: time.Unix(1586670387, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ts.gotemplate": tsGotemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"ts.gotemplate": &bintree{tsGotemplate, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
