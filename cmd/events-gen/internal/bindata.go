// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package internal generated by go-bindata.// sources:
// ts.gotemplate
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tsGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x41\x8b\xdb\x3a\x10\xbe\xfb\x57\xcc\x83\x40\x6c\xc8\x9a\xbc\xab\xf3\xb2\xb7\x57\xda\x42\xb7\x85\x5d\xe8\x75\xb5\xf6\x38\x11\x55\x24\x23\x4d\xd2\x0d\x5a\xfd\xf7\x22\xcb\x56\xec\x38\x49\x2f\x0b\xad\x4e\xb1\x3d\x33\xdf\x7c\x9f\xe6\x9b\x58\xab\x99\xdc\x20\x54\x58\x73\xc9\x89\x2b\x69\x9c\x4b\xf0\xb5\x51\x9a\x80\x4b\x42\x5d\xb3\x12\xc1\xda\xfc\xe9\xd8\xe0\x03\xdb\xa1\x73\x60\x13\x00\x00\x6b\xef\x20\x24\xe7\x8f\xa4\xf7\x25\x7d\xe0\x28\x2a\x9f\x1e\xbe\xe6\x4f\x6c\xe3\x5c\xe1\x7f\xc1\x1b\xd0\xb1\x41\x53\x6a\xde\x50\x0c\xb8\x03\x94\x95\x73\x89\x4b\xac\x0d\xbf\x7a\x60\x1f\x0c\xff\x1f\x50\x92\x47\x84\x35\xf4\x6d\xce\xb8\xac\xf0\x75\x01\x33\x3c\x40\xb1\x86\xbc\x8d\x31\xce\x59\xcb\x6b\xd8\x50\xf7\x1d\x96\xce\xc1\x1b\x74\x55\xe7\xd6\xce\xf0\x90\x87\xde\xe7\xdd\xcb\xd5\x14\xea\x1b\x3b\x0a\xc5\xaa\xeb\x68\x23\x8d\x6e\x21\x06\xc0\x93\x60\xd7\x31\x3f\x32\x59\x09\xd4\xb0\x86\x34\x6d\x02\x7e\x31\xea\x66\x01\xe8\x9f\x8a\x93\x1a\x19\xac\xef\x21\x3d\x28\x5e\x65\x19\xbc\x5d\xcb\x1b\x46\x45\x59\x4b\xc1\x8c\x09\x61\xa6\xbb\xc4\x46\xf3\x03\x23\x04\x43\xaa\x69\xd0\x93\xaf\x99\x30\xb8\x1a\x7d\xd4\xc8\x2a\x25\xc5\x11\x04\x37\x84\x12\xb5\x81\x35\x48\xfc\x09\x5f\x58\xf3\x5f\x6c\x6c\x31\xa2\x74\x9f\x66\xab\xa4\xad\x52\x2a\x69\xda\xf9\x50\x3a\x9d\x54\xdc\x6b\x51\x80\x21\xcd\xe5\x66\x31\xc5\xd3\x58\x2a\x29\xb1\xa4\x4f\x7e\x12\x0f\x4c\x14\x20\xf7\xbb\x97\x56\xb0\x7f\x97\xcb\x65\xd6\xb1\xf0\x87\xb6\xdc\xe4\x86\x98\x26\x8f\xec\xdf\xb8\x80\xaf\x64\x7a\xae\xe1\x02\xb6\xa1\xcb\x62\xd4\xf3\xa4\x5c\xe4\x9b\x1b\xa4\x50\x25\xa6\x66\x23\x8c\xba\x7e\x07\x90\x0a\x05\x12\x86\x42\xb1\x7c\x3f\x8c\x71\xd6\x3b\x52\xd6\x76\x23\x9d\x46\x98\xc1\x2c\x8c\x0c\x7b\x7d\x64\x46\x61\xb7\x67\xed\x37\xe2\xcc\x63\x3f\xf3\x48\x1c\x98\x19\x53\x5f\x9d\x69\xf6\x17\x71\xe8\xb4\x1f\xd0\x38\x75\x1b\xd7\x93\x7f\xf6\x4e\x49\x2f\x0c\x5e\xef\x1f\xd2\x7b\x1c\xf1\x3c\x59\xac\x9d\xcd\x41\x26\xaf\x21\x1d\x66\x67\xa0\x91\xf6\x5a\xae\x62\x84\x40\x02\x8d\x6d\xe6\xb9\x39\xa3\xb5\xc0\xa8\xf2\x07\x52\x67\xc9\xef\xf8\xf2\xd8\x3e\x87\xca\x7b\x2d\xb2\x53\x7c\x88\xcc\x95\x2c\x85\x32\x7e\xaf\xa6\xad\x3a\xa7\x8e\xfa\xae\xfe\x89\xa0\xd9\xd9\x57\x7f\x86\x1d\x9d\xe8\x0e\x8f\x41\x7a\xe2\x3b\x54\x7b\x4a\x03\xc4\xd0\x9d\x8b\xf0\x34\x31\x77\x36\xae\xe3\x92\xe9\xaf\x48\x00\xb5\x56\xed\xda\xc4\x0b\x0c\xbc\x2c\x4a\x60\xde\x06\xa5\x78\x56\xf7\x5d\xf8\x85\x3e\x5a\x19\xd3\xec\x0f\xf0\xdf\xa1\x31\x6c\xd3\x5e\xa1\xad\x18\x31\x77\x45\x06\x02\xdb\xad\xad\xce\x2f\x0e\xd6\xf0\xf9\xf1\xeb\x43\xde\x30\x6d\x30\xf5\xb9\x99\xf7\xa9\xed\x8d\x13\x97\x71\xef\x2f\x26\x8f\xe0\x56\x17\x2a\x6f\xe3\x9f\xd7\x99\x97\x36\xfd\xb2\x8c\x0b\xa0\x35\xe2\xf4\x1a\xb6\xd3\x95\xd8\x1f\xd2\xc7\xe9\x4b\x7f\xba\x9c\xde\xff\x9d\xe1\x6f\x21\xb5\x12\x42\xc9\xa8\xdc\xfa\x71\xb9\x5c\x76\x3c\x33\xcf\x35\xe3\x02\x2b\x20\x05\x8d\x56\x25\x1a\x13\xd9\xd6\x4a\x77\x90\xb3\x20\xad\x2b\x9e\x17\x70\x11\xf3\xe6\x75\xba\x24\x71\xbf\x02\x00\x00\xff\xff\xbb\xab\x8b\x58\x7e\x09\x00\x00")

func tsGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_tsGotemplate,
		"ts.gotemplate",
	)
}

func tsGotemplate() (*asset, error) {
	bytes, err := tsGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ts.gotemplate", size: 2430, mode: os.FileMode(420), modTime: time.Unix(1586701846, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ts.gotemplate": tsGotemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"ts.gotemplate": &bintree{tsGotemplate, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
