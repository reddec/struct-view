// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package internal generated by go-bindata.// sources:
// ts.gotemplate
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tsGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x4d\x6f\xdb\x38\x10\xbd\xfb\x57\xcc\x02\x06\x2c\x01\x8e\xe0\xbd\xca\xeb\xdc\x76\xb1\x2d\xd0\xb4\x40\x02\xf4\x1a\x46\x1a\xd9\x44\x69\x52\x20\x69\x37\x06\xc3\xff\x5e\xf0\x43\x94\x64\xd9\xce\x25\x40\xcb\x8b\x4d\x72\x3e\x1f\xdf\x1b\x71\xb2\x47\xd5\x92\x0a\xe1\xdf\x23\x72\xfd\x74\x6a\x51\x81\x99\x01\x00\x18\x23\x09\xdf\x22\xd4\xd8\x50\x4e\x35\x15\x5c\x59\xeb\x6f\xf0\xb5\x15\x52\x03\xe5\x1a\x65\xe3\x7c\x8d\x29\x9c\xe7\x03\xd9\xa3\xb5\xd1\x3d\x84\xb8\x83\x10\xa4\x78\xd4\xf2\x50\xe9\xff\x28\xb2\xba\x0b\x13\x2c\x8a\x27\xb2\xb5\xb6\x74\xff\xe0\x0d\xb4\x2b\xa0\x92\xb4\xd5\x23\xa3\x3b\x40\x5e\xc7\x13\x1b\xab\x0b\x27\x76\x36\x8b\xe5\x38\xd7\xd0\x85\xab\x03\x36\xa9\x81\x39\xe5\x35\xbe\x2e\x61\x8e\x47\x28\x37\x50\x78\x1b\x65\xad\x31\xb4\x81\xad\x8e\xf7\xb0\xb2\x16\xde\xba\xb8\x0b\x63\xe6\x78\x2c\x42\x47\x8b\x78\xb8\x9e\xa6\xfa\x46\x4e\x4c\x90\xfa\x7a\xb6\x11\x7a\xb7\x32\xf6\xf8\x17\x21\x77\x8f\xe8\xf5\xf4\xff\x13\x5e\x33\x94\xb0\x81\x2c\x6b\x43\x29\xe5\xa8\xb0\x25\xa0\xdb\x95\x3d\x30\x39\x6c\xee\x21\x3b\x0a\x5a\xe7\x39\xbc\x5d\xf3\x1b\x5a\x25\x84\x2b\x46\x94\x0a\x66\x1d\x49\x5a\x49\x8f\x44\x23\x28\x2d\xda\x16\x1d\x0e\x0d\x61\x0a\xd7\xa3\x4b\x89\xa4\x16\x9c\x9d\x80\x51\xa5\x91\xa3\x54\xb0\x01\x8e\x3f\xe1\x0b\x69\xff\x49\x85\x2d\x47\x2d\xdd\x67\xf9\x7a\xe6\xa3\x54\x82\x2b\x4f\x1e\x21\xb3\x49\xc4\x83\x64\x25\x28\x2d\x29\xdf\x2e\xa7\xf9\x24\x56\x82\x73\xac\xf4\x27\x47\xd5\x23\x61\x25\xf0\xc3\xfe\xc5\x03\xf6\xf7\x6a\xb5\xca\x07\x5c\xd5\x3b\xaa\x0a\xa5\x89\xd4\x2e\x73\x20\x9a\xff\x11\x3c\x3b\xc7\x70\x09\xbb\x50\x65\x39\xaa\x79\x12\x2e\xf5\x5b\x28\xd4\x21\x4a\x72\xcd\x47\x39\x9a\xe6\x03\x92\xd4\xc8\x50\x63\x08\x94\xc2\x77\xbc\x4c\xb4\x8f\x4d\x19\x13\xd9\x9d\xa5\x34\xe7\x5c\xe8\xd8\x38\xa0\xe2\x3b\xec\xb9\xe0\x71\x9b\x81\xef\x40\xb6\x48\x55\x2e\x12\x1c\x40\xd4\x18\x90\xf5\x19\x92\x7f\x7c\x67\xf1\x9d\x06\xcd\xf5\x3d\x74\x73\xcd\xef\x9d\xaa\xb2\x0b\x24\xed\xb4\xa6\xe5\x01\x47\xdd\xf7\x72\xf4\x3c\x1e\x78\xd2\x06\xb2\xa1\x77\x0e\x12\xf5\x41\xf2\x75\xb2\x60\xa8\x41\xa2\xf7\x3c\x17\x72\x92\x21\x28\x51\xfd\x40\x1d\xe5\xfb\x1d\x5f\x1e\xfd\x3e\x44\x3e\x48\x96\xf7\xf6\xc1\xb2\x10\xbc\x62\x42\xb9\x71\x9c\x79\x74\xfa\x8a\xba\xaa\xfe\x4a\x49\xf3\xb3\x5b\xb7\x86\x15\xf5\xed\x0e\x97\xc2\x24\xef\x2c\xe4\x18\x4a\x79\x19\x76\x93\x49\x90\x8f\x03\xf5\x1f\x1b\x3b\xed\x00\xa5\x14\x7e\xc6\xe2\x85\x16\x1c\x2e\x82\x61\xe1\x8d\x32\x3c\x8b\xfb\x21\x0d\x86\x3a\x3c\x8e\x59\xfe\x3b\x00\xd8\xa3\x52\x64\xeb\x1f\xd1\xd4\x44\x13\x7b\x05\x07\x0d\x26\x0e\xb9\x28\x1e\x0b\x1b\xf8\xfc\xf8\xf5\xa1\x68\x89\x54\x98\x39\xdf\xdc\xe9\xd7\x74\xd2\x49\xa3\xbb\x13\x1b\xe1\x27\xb0\xeb\x0b\x91\x77\xe9\x53\x77\xa6\xa6\x6d\x37\x5a\xd3\x60\xf0\x52\x9c\xbe\xc3\x6e\x3a\x40\xbb\xa5\xe5\x69\x7a\xe8\x56\xf4\xe9\x86\x41\x94\xfc\xad\x4c\x1e\x42\xa8\x88\xae\x76\x8e\x2f\x97\xc3\x8e\x49\xf3\xdc\x10\xca\xb0\x06\x2d\xa0\x95\xa2\x42\xa5\x52\xb7\x8d\x90\x31\xe5\x3c\x40\x6b\xcb\xe7\x25\x5c\xcc\x79\xf3\x39\xed\x6c\x66\x7f\x05\x00\x00\xff\xff\x5f\x5f\x40\xdc\xec\x09\x00\x00")

func tsGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_tsGotemplate,
		"ts.gotemplate",
	)
}

func tsGotemplate() (*asset, error) {
	bytes, err := tsGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ts.gotemplate", size: 2540, mode: os.FileMode(420), modTime: time.Unix(1586668191, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ts.gotemplate": tsGotemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"ts.gotemplate": &bintree{tsGotemplate, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
