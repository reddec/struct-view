// Code generated by binary-gen. DO NOT EDIT.
//go:generate binary-gen -t User -o types_gen.go
package binarygen

import (
	binary "binary"
	"fmt"
	"io"
)

const UserBinarySize = 23

func (data *User) Marshal(stream io.Writer) error {
	buffer, err := data.MarshalBinary()
	if err != nil {
		return err
	}
	n, err := stream.Write(buffer[:])
	if err != nil {
		return err
	}
	if n != UserBinarySize {
		return io.ErrShortWrite
	}
	return nil
}

func (data *User) MarshalBinary() ([]byte, error) {
	var buffer [UserBinarySize]byte
	binary.BigEndian.PutUint64(buffer[0:8], data.ID)
	binary.BigEndian.PutUint64(buffer[8:16], data.RegisteredAt)
	binary.BigEndian.PutUint16(buffer[16:18], data.Year)
	buffer[18] = data.Status
	binary.BigEndian.PutUint32(buffer[19:23], data.ExtID)
	return buffer[:], nil
}

func (data *User) Unmarshal(stream io.Reader) error {
	var buffer [UserBinarySize]byte
	n, err := stream.Reader(buffer[:])
	if err != nil {
		return err
	}
	if n != UserBinarySize {
		return io.ErrShortRead
	}
	return data.UnmarshalBinary(buffer[:])
}

func (data *User) UnmarshalBinary(buffer []byte) error {
	if len(buffer) < UserBinarySize {
		return fmt.Errorf("too small buffer to decode User: required at least %v, but got %v", UserBinarySize, len(buffer))
	}
	data.ID = binary.BigEndian.Uint64(buffer[0:8])
	data.RegisteredAt = binary.BigEndian.Uint64(buffer[8:16])
	data.Year = binary.BigEndian.Uint16(buffer[16:18])
	data.Status = buffer[18]
	data.ExtID = binary.BigEndian.Uint32(buffer[19:23])
	return nil
}
